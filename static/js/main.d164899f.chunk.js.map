{"version":3,"sources":["Button/index.js","Time/index.js","App/index.jsx","serviceWorker.js","index.js"],"names":["Button","content","onButtonClick","type","className","onClick","icon","faBackspace","Time","React","useState","Date","today","setDate","useEffect","timer","setInterval","clearInterval","time","toLocaleTimeString","hour","hour12","minute","App","props","handleButtonPress","incrementCount","setState","input","state","handleButtonEqual","math","count","handleButtonClear","handleButtonPercentage","handleButtonDelete","substring","length","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d164899f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBackspace } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Button = ({ content, onButtonClick, type }) => {\r\n  if(content===\"del\")\r\n  {\r\n    return(\r\n      <div\r\n      className={`Button ${type || \"\"}`} onClick={onButtonClick(content)}>\r\n      <span> \r\n      <FontAwesomeIcon className=\"faback\" icon={faBackspace} />\r\n      </span>\r\n      </div>\r\n    );\r\n  \r\n  }\r\n  else{\r\n    return (\r\n      <div\r\n      className={`Button ${type || \"\"}`} onClick={onButtonClick(content)}>\r\n      {content}\r\n    </div>\r\n      );\r\n  }\r\n  \r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nfunction Time() {\r\n  const locale = 'en';\r\n  const [today, setDate] = React.useState(new Date()); \r\n  React.useEffect(() => {\r\n    const timer = setInterval(() => { // Creates an interval which will update the current data every minute\r\n    // This will trigger a rerender every component that uses the useDate hook.\r\n    setDate(new Date());\r\n  }, 60 * 1000);\r\n  return () => {\r\n    clearInterval(timer); // Return a funtion to clear the timer so that it will stop being called on unmount\r\n  }\r\n}, []);\r\n\r\n  const time = today.toLocaleTimeString(locale, { hour: 'numeric', hour12: true, minute: 'numeric' });\r\n\r\n  return (\r\n    <div>\r\n    {time}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Time;\r\n","import React ,{Component } from 'react';\r\nimport Button from \"../Button\";\r\nimport Time from \"../Time\"\r\nimport './App.css';\r\nimport * as math from 'mathjs';\r\n\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        input : \"\",\r\n        count : \"\",\r\n    };\r\n  }\r\n\r\n  handleButtonPress = content => () =>{\r\n    this.incrementCount();\r\n      if(content===\"x\")\r\n      {\r\n        this.setState({input : this.state.input + \"*\"}); \r\n      }\r\n      else if(content===\"รท\")\r\n      {\r\n        this.setState({input : this.state.input + \"/\"}); \r\n      }\r\n      else{\r\n        this.setState({input : this.state.input + content}); \r\n      }\r\n  };\r\n\r\n  incrementCount() {\r\n    // Note: this will *not* work as intended.\r\n    this.setState({count: math.evaluate(this.state.count + 1)});\r\n  }\r\n\r\n  handleButtonEqual =content =>() =>{\r\n    this.setState({input : math.evaluate(this.state.input)});\r\n    this.setState({count:\"\"})\r\n  }\r\n\r\n  handleButtonClear = content => () =>{\r\n    this.setState({input : \"\" });\r\n    this.setState({count:\"\"})\r\n  }\r\n\r\n  handleButtonPercentage = content => () =>{\r\n    this.setState({input : this.state.input / 100});\r\n  }\r\n\r\n  handleButtonDelete = content => () =>{\r\n    this.setState({input : this.state.input.substring(0,this.state.input.length-1)});\r\n  }\r\n\r\n  render()\r\n  {\r\n    if(this.state.count <= 7)\r\n    {\r\n      return (\r\n        <div className=\"App\">\r\n        <div className=\"top-bar\"><Time/></div>\r\n        <div className=\"display\">{this.state.input}</div>\r\n        <div className=\"buttons\">\r\n            <Button onButtonClick={this.handleButtonClear} content=\"AC\" type=\"function\" />\r\n            <Button onButtonClick={this.handleButtonPercentage} content=\"%\" type=\"function\" />\r\n            <Button onButtonClick={this.handleButtonDelete} content=\"del\" type=\"function\"/>\r\n            <Button onButtonClick={this.handleButtonPress} content=\"รท\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"7\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"8\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"9\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"x\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"4\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"5\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"6\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"-\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"1\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"2\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"3\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"+\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"00\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"0\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\".\" />\r\n            <Button onButtonClick={this.handleButtonEqual} content=\"=\" type=\"operator\" />\r\n        </div>\r\n        <div className=\"bottom-bar\"></div>\r\n        </div>\r\n        \r\n      );\r\n    }\r\n\r\n    else if(this.state.count<=11){\r\n      return (\r\n        <div className=\"App\">\r\n        <div className=\"top-bar\"><Time/></div>\r\n        <div className=\"displayMid\">{this.state.input}</div>\r\n        <div className=\"buttons\">\r\n            <Button onButtonClick={this.handleButtonClear} content=\"AC\" type=\"function\" />\r\n            <Button onButtonClick={this.handleButtonPercentage} content=\"%\" type=\"function\" />\r\n            <Button onButtonClick={this.handleButtonDelete} content=\"del\"type=\"function\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"รท\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"7\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"8\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"9\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"x\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"4\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"5\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"6\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"-\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"1\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"2\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"3\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"+\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"00\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"0\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\".\" />\r\n            <Button onButtonClick={this.handleButtonEqual} content=\"=\" type=\"operator\" />\r\n        </div>\r\n        <div className=\"bottom-bar\"></div>\r\n        </div>\r\n        \r\n      );\r\n    }\r\n    else{\r\n      return (\r\n        <div className=\"App\">\r\n        <div className=\"top-bar\"><Time/></div>\r\n        <div className=\"displaySmall\">{this.state.input}</div>\r\n        <div className=\"buttons\">\r\n            <Button onButtonClick={this.handleButtonClear} content=\"AC\" type=\"function\" />\r\n            <Button onButtonClick={this.handleButtonPercentage} content=\"%\" type=\"function\" />\r\n            <Button onButtonClick={this.handleButtonDelete} content=\"del\" type=\"function\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"รท\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"7\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"8\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"9\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"x\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"4\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"5\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"6\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"-\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"1\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"2\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"3\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"+\" type=\"operator\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"00\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\"0\" />\r\n            <Button onButtonClick={this.handleButtonPress} content=\".\" />\r\n            <Button onButtonClick={this.handleButtonEqual} content=\"=\" type=\"operator\" />\r\n        </div>\r\n        <div className=\"bottom-bar\"></div>\r\n        </div>\r\n        \r\n      );\r\n  \r\n    }\r\n    \r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}